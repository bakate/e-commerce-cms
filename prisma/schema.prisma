// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  label      String
  imageUrl   String
  storeId    String     @db.ObjectId
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Product    Product[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreToSize", fields: [storeId], references: [id])
  name       String
  value      String
  productIds String[]    @db.ObjectId
  products   Product[]   @relation("SizeToProduct", fields: [productIds], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Product    Product[]
  OrderItem  OrderItem[]

  @@index([storeId])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String   @db.ObjectId
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Float
  description String
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  inventory   Int      @default(0) // can be negative
  sizeIds     String[] @db.ObjectId
  sizes       Size[]   @relation("SizeToProduct", fields: [sizeIds], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[]

  orderItems  OrderItem[]
  Billboard   Billboard?  @relation(fields: [billboardId], references: [id])
  billboardId String?     @db.ObjectId
  Order       Order[]
  Size        Size?       @relation(fields: [sizeId], references: [id])
  sizeId      String?     @db.ObjectId

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeIds])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Product    Product?    @relation(fields: [productId], references: [id])
  productId  String?     @db.ObjectId

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Size      Size?    @relation(fields: [sizeId], references: [id])
  sizeId    String?  @db.ObjectId

  @@index([orderId])
  @@index([productId])
}
